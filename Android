

------------------------------------------------------
JVM Architecture:- JVM itself knows nothing about the Java programming language. Instead, it knows how to execute its own instruction set, called Java bytecode.


------------------------------------------------------
R8:- Google released R8 as a replacement of Proguard to help developers shrink the code with the better-generated output (APK). 
R8 is a tool that converts our java byte code into an optimized dex code.it optimizes like removing unused classes, methods, etc. 
It runs on the compile time. R8 uses Proguard rules to modify its default behavior.

It uses three techniques to reduce size - Shrinking or Tree Shaking, Optimization, Identifier Renaming
R8 is present by default in our application but to enable R8 shrinking in our application, set the minifyEnabled to true.

Android app using Gradle plugin above 3.4.0 or more the project uses R8 by default and no longer uses the Proguard to perform optimizations. 
But, it uses Proguard rules only.
Proguard reduces the app size by 8.5% and compared to R8 which reduces the code by 10%.

While using Proguard, the Applications code is converted to Java bytecode by the Java compiler. After the conversion, it is then optimized by 
Proguard using the rules which we have written. Then dex converts it to optimized Dalvik byte code.
While using R8, first the app's code is converted to Java bytecode by the java compiler and then using R8 directly, 
it converts the java byte code in Dalvik bytecode. R8 coming as a default compile-time optimizer.
------------------------------------------------------

Proguard:-
Is it possible to tell the ProGuard to completely skip the class if there is native function in it

Use these rules:

-keepclasseswithmembers class com.your.packages.** {
    native <methods>;
}
-keepclassmembers class com.your.packages.** {
    native <methods>;
}
Note, that "completely skipping" class with Proguard is a always bad idea, because it may also indirectly keep some classes, used from code of your kept classes. Instead I recommend the following mode:

-keepclasseswithmembers,allowshrinking,allowoptimization class com.your.packages.** {
    native <methods>;
}
-keepclassmembers class com.your.packages.** {
    native <methods>;
}
It will allow shrinking and optimizing code of non-native methods, present in the same class.

You can do even better: if your native methods are resolved by names (e.g. they are called something like Java_com_your_packages_methodName), and you don't use RegisterNatives to register them explicitly, you may allow shrinking away unused native methods by removing the second rule, which will leave only

-keepclasseswithmembers,allowshrinking,allowoptimization class com.your.packages.** {
    native <methods>;
}
If you want some of class members to be accessible from JNI (e.g. you have some static callback methods to be called from native code), you should keep them explicitly: annotate each such member with specialized annotation and use an annotation-based rule to keep them:

-keepclassmembers,allowoptimization,includedescriptorclasses class com.your.packages.** {
    @android.support.annotation.Keep *;
}
You can use your own annotation in place of the one from Android support library â€” in fact, it is better to use your own in order to avoid interference from existing consumer rules, coming from Android Gradle plugin or other libraries.

In general, I recommend you to reduce the amount of friction between JNI and Java code as much as possible. If you have multiple related Java methods, called from JNI, try to put them together in the same method:

@Keep
public static void callback(int action, String arg) {
    switch (action) {
        ...
    }
}
Throw your exceptions from Java code (you was going to reflectively invoke their constructors anyway, so may as well invoke a static helper method instead):

@Keep
public static void throwException(int type, String message) {
    switch (type) {
        case 0:
            throw new BadThingsHappenedException(message);
        case 1:
            throw new AllHopeIsLostError();
        ...
    }
}
If you have a class, that has to be passed to JNI, try to pass individual fields instead of that class:

public final class DataClass {
    int intField;
    String stringField;

    public void doSomeNativeOperation() {
        JNI.doSomeNativeOperation(this);
    }
}

public final class JNI {
    public static void doSomeNativeOperation(DataClass arg) {
        doSomeNativeOperation0(arg.intField, arg.stringField);
    }

    private static native void doSomeNativeOperation0(int intField, String stringField);
}
If you have a native peer class (a class, closely connected to some structure in native memory), you can keep a pointer to native structure in that class in long field, and pass that field to native methods. Then in native methods cast that long to pointer:

public final class Peer {
    long pointer;

    // constructor is invoked from JNI
    @Keep
    protected Peer(long pointer) {
        this.pointer = pointer;
    }

    public void doSomeNativeOperation() {
        JNI.doSomeNativeOperation(this);
    }
}

public final class JNI {
    public static void doSomeNativeOperation(Peer peer) {
        doSomeNativeOperation0(peer.pointer);
    }

    private static native void doSomeNativeOperation0(long pointer);
}
And in native code:

void JNIEXPORT Java_com_your_packages_methodName(JNIEnv* env, jobject type, jlong ptr) {
    struct my_struct peer = (struct my_struc*) (intptr_t) ptr;
    ...
}
These simple rules will allow you to fully obfuscate any huge application using JNI, except for a single small class, that contains all native methods.

I suggest you go even further and push for repackaging classes, referenced by native callbacks.

Instead of

@Keep
public static void callback(YourCustomType arg) {
    ...
}
You can omit a type of parameter by replacing it with Object:

@Keep
public static void callback(Object arg) {
    // this cast won't make much difference in performance, but it makes huge
    // difference for Proguard!
    YourCustomType instance = (YourCustomType) arg;

    ...
}
This will let you obfuscate and repackage even types of callback arguments.

------------------------------------------------------
LiveData:- LiveData is an observable data holder class. LiveData is lifecycle-aware means it only updates app component observers that are in an active lifecycle state.
active state if its lifecycle is in the STARTED or RESUMED state.LiveData only notifies active observers about updates. Inactive observers registered to watch 
LiveData objects aren't notified about changes. You can register an observer paired with an object that implements the LifecycleOwner interface.
advantages of using LiveData
You can extend a LiveData object using the singleton pattern to wrap system services so that they can be shared in your app. The LiveData object connects to the system 
service once, and then any observer that needs the resource can just watch the LiveData object.
When you update the value stored in the LiveData object, it triggers all registered observers as long as the attached LifecycleOwner is in the active state.
LiveData is a wrapper that can be used with any data. A LiveData object is usually stored within a ViewModel object

LiveData has no publicly available methods to update the stored data. The MutableLiveData class exposes the setValue(T) and postValue(T) methods publicly and you must use 
these if you need to edit the value stored in a LiveData object. Usually MutableLiveData is used in the ViewModel and then the ViewModel only exposes immutable LiveData 
objects to the observers.
LiveDatais not designed to handle asynchronous streams of data. Even though you can use LiveData transformations and MediatorLiveData to achieve this

You can register an observer without an associated LifecycleOwner object using the observeForever(Observer) method. In this case, the observer is considered to be always 
active and is therefore always notified about modifications. You can remove these observers calling the removeObserver(Observer) method.

Note: Make sure to store LiveData objects that update the UI in ViewModel objects, as opposed to an activity or fragment. To decouple LiveData instances from specific 
activity or fragment instances and allow LiveData objects to survive configuration changes.

Note: You must call the setValue(T) method to update the LiveData object from the main thread. If the code is executed in a worker thread, you can use the postValue(T) method 
instead to update the LiveData object.
------------------------------------------------------
MVVM and MVP comparison
------------------------------------------------------
Dex file generation amd multi dexing:-
------------------------------------------------------
Use of AIDL:-
------------------------------------------------------
Configuration changes and memory leaks because UI components trying to manage asynchronous calls
ViewModel working:- ViewModel objects are also lifecycle-aware. They are automatically cleared when the Lifecycle they are observing gets permanently destroyed.
		ViewModel includes support for Kotlin-Coroutines. So, they can be easily integrated for any asynchronous processing.
viewmodels are stored inside the activity (or FragmentManager in case of fragments)
viewModel = ViewModelProvider(this, ViewModelFactory()).get(CounterViewModel::class.java) //this=ViewModelStoreOwner
Creation of ViewModelProvider - public ViewModelProvider(@NonNull ViewModelStoreOwner owner, @NonNull Factory factory) {
				    this(owner.getViewModelStore(), factory);
				}
public interface ViewModelStoreOwner {
    @NonNull
    ViewModelStore getViewModelStore();
}
So now we know that our activity is the ViewModelStoreOwner and its the responsibility of our activity to provide the ViewModelStore. 
Is Activty implementing ViewModelStoreOwner interface? - Yes, AppCompatActivity In androidx package

Getting ViewModel from ViewModelProvider- 	public <T extends ViewModel> T get(@NonNull Class<T> modelClass) {
						    String canonicalName = modelClass.getCanonicalName();
						    if (canonicalName == null) {
							throw new IllegalArgumentException("Local and anonymous classes can not be ViewModels");
						    }
						    return get(DEFAULT_KEY + ":" + canonicalName, modelClass);
						}

public <T extends ViewModel> T get(@NonNull String key, @NonNull Class<T> modelClass) {
    ViewModel viewModel = mViewModelStore.get(key);

    if (modelClass.isInstance(viewModel)) {
        if (mFactory instanceof OnRequeryFactory) {
            ((OnRequeryFactory) mFactory).onRequery(viewModel);
        }
        return (T) viewModel;
    } else {
        //noinspection StatementWithEmptyBody
        if (viewModel != null) {
            // TODO: log a warning.
        }
    }
    if (mFactory instanceof KeyedFactory) {
        viewModel = ((KeyedFactory) (mFactory)).create(key, modelClass);
    } else {
        viewModel = (mFactory).create(modelClass);
    }
    mViewModelStore.put(key, viewModel);
    return (T) viewModel;
}

A ViewModelStore can be considered as a container that stores the ViewModels in a HashMap. Fragment (from androidx.fragment.app) & ComponentActivity 
(from androidx.activity) implements ViewModelStoreOwner. These classes maintains a viewModelStore and value is restored appropriately

Our AppCompatActivity extends FragmentAcrivity extends ComponentActivity implements ViewModelStoreOwner
When the owner activity is finished, the framework calls the ViewModel objects's onCleared() method so that it can clean up resources

ViewModel doesn't know about view and Lifecycle objects. ViewModel objects can contain LifecycleObservers, such as LiveData objects. 
However ViewModel objects must never observe changes to lifecycle-aware observables, such as LiveData objects. If the ViewModel needs the Application context, 
for example to find a system service, it can extend the AndroidViewModel class and have a constructor that receives the Application in the constructor, 
since Application class extends Context

When our activity is recreated due to any configuration change, nc(NonConfigurationInstances) contains the previous instance of ViewModelStore. 
nc(NonConfigurationInstances) is null when our activity is created for the first time.
NonConfigurationInstances(Activity.java) is the object which is retained by the Android system even when the activity gets recreated.

Whenever our activity is getting recreated due to any configuration change, onRetainNonConfigurationInstance() gets invoked which returns the 
NonConfigurationInstances(ComponentActivity.java) instance. This object is retained by the Android system so that it can be delivered to the next activity instance on recreation.

Similarly, we can also retain our own custom objects by implementing the onRetainCustomNonConfigurationInstance().

After the recreation of our activity, NonConfigurationInstances(Activity.java) is received in the attach() method of the Activity class.

------------------------------------------------------
Immutable class demo - Immutable class in java means that once an object is created, we cannot change its content. In Java, all the wrapper classes 
(like Integer, Boolean, Byte, Short) and String class is immutable.
-The class must be declared as final so that child classes canâ€™t be created.
-Data members in the class must be declared private so that direct access is not allowed.
-Data members in the class must be declared as final so that we canâ€™t change the value of it after object creation.
-There should be no setters or in simpler terms, there should be no option to change the value of the instance variable.
-A parameterized constructor should initialize all the fields performing a deep copy so that data members canâ€™t be modified with an object reference.
-Deep Copy of objects should be performed in the getter methods to return a copy rather than returning the actual object reference)

https://www.geeksforgeeks.org/create-immutable-class-java/
we donâ€™t need to perform deep copy or cloning of data members of wrapper types as they are already immutable.
------------------------------------------------------
ClassLoader:-
------------------------------------------------------
DecorView:-

------------------------------------------------------
Handlers are synchronous by default

The difference between Handler and Thread: Imagine you have a Runnable r = new Runnable{...}
When you use new Thread(r).start(), you actually created a new thread and run task asynchronously.
When you use new Handler().post(r) (or Message), you added the Runnable object to Looper and execute the code later in the same thread.
A Thread, generally MainThread or UIThread contains a Looper. When MainThread runs, it will loop the Looper and execute Runnable one by one.

Thread actually creates new thread - part of job running in background relatively to current thread.

Handler itself doesn't provide any mechanisms for background job - it is just a tool to access message queue (Looper) associated with some thread. 
UI thread have Looper attached by default
------------------------------------------------------
Looper(final), MessageQueue ->
class LooperThread extends Thread {//A thread with a looper and handler
  *      public Handler mHandler;
  *
  *      public void run() {
  *          Looper.prepare();
  *
  *          mHandler = new Handler(Looper.myLooper()) {
  *              public void handleMessage(Message msg) {
  *                  // process incoming messages here
  *              }
  *          };
  *
  *          Looper.loop();
  *      }
  *  }
  
  Looper transforms a normal thread, which terminates when its run() method return, into something run continuously until Android app is running,
  Looper provides a queue where jobs to be done are enqueued
  https://stackoverflow.com/questions/7597742/what-is-the-purpose-of-looper-and-how-to-use-it#:~:text=What%20is%20Looper%3F,run%20another%20Message(Runnable)

Does one thread has multiple looper? - No

HandlerThread is just a thread which has event loop. That means that if you need Thread with Looper you donâ€™t need to create it by yourself, 
you just can take HandlerThread


-----------
ThreadLocal- A generic type class. This class provides thread-local variables. the class below generates unique identifiers local to each thread.
A thread's id is assigned the first time it invokes {@code ThreadId.get()} and remains unchanged on subsequent calls. Java ThreadLocal class enables 
you to create variables that can only be read and written by the same thread. Thus, even if two threads are executing the same code, and the code 
has a reference to the same ThreadLocal variable, the two threads cannot see each other's ThreadLocal variables.

------------------------------------------------------
Context (abstract):- There are two types of context one is Activity context and second is Application context

Application context is associated with application so will be same throughout the life of application. So for Toast you can also use application context 
because toast can be displayed from anywhere within your application and is not attached to specific window. 
Activity Context is associated with activity and can be destroyed if activity destroyed. You should launch new activity with acitivty context to maintain non-standard 
back stack behaviors in your application. You may use application context to launch an activtty but then  you need to set flag Intent.FLAG_ACTIVITY_NEW_TASK in intent 
to treat it as a new task. This generally should only be used if you need a Context whose lifecycle is separate from the current context, that is tied to the lifetime 
of the process rather than the current component

Application class never has any UI associations and such has no window token. So for UI items that need context use the Activity which already extends Context.
getApplicationContext() offers application context and getBaseContext() offers activity context.

Difference between MainActivity.this and this :- If we want to use activity context in Inner class of MainActivity then we use MainActivity.this or 
if we use in MainActivity itself then use this simply. and if we are in another class then we simply pass it an intance.

-----------------------------------------------------
SparseArray<E>, SparseBooleanArray, SparseIntArray - Maps integers to Objects, avoid the creation of Integer objects as in Map<Integer, String>. 
These are efficient memory structures than HashMap. Ex-

SparseArray<String> map = new SparseArray<String>();
map.put(1, "Hello");

-----------------------------------------------------
least recently used cache _ (LRU cache) - A LRU cache keeps track of the usage of its members. It has a given size and if this size is exceeded, 
it removes the items which have not be accessed the longest.

onTrimMemory()- This method is called by the Android system asking you to cleanup your memory in case the Android system requires resources for foreground processes.

By default, the cache size is measured in the number of entries. Override sizeOf(K, V) to size the cache in different units. For example, 
this cache is limited to 4MiB of bitmaps

Cache - 1 Memorycache (LruCache) -  while in the background it might be killed
	2 DiskCache (DiskLruCache) -  fetching images from disk is slower than loading from memory and should be done in a background thread, as disk read times can be unpredictable

Note: A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.

-----------------------------------------------------

ViewPager- getItemPosition(). If for a child view this method returns POSITION_NONE, the ViewPager understands that the view has been deleted, calling the destroyItem(), 
and removing this view So this approach is wrong if items count is too high.

approach is to use the setTag() method for any instantiated view in the instantiateItem() method. So when you want to change the data or invalidate the view that you need, 
you can call the findViewWithTag() method on the ViewPager to retrieve the previously instantiated view and modify/use it as you want without having to delete/create a new view each time 
you want to update some value.

----------------------------------------------------------


-------------------------Hey--------------------------------
Executor
OEM
What is the use of cryptoobjects
Jetpack, Jetpack Datastore
Blocking queue and dequeue
Lazy and eager
ViewModel and AndroidViewModel
Thread
Application COntext and context
Lifecycle and LifecycleOwner, LifecycleObeservers

LiveData, MutableLiveData and MediatorLiveData
Loaders and Room
HIDL and HAL
HashMap and ConcurrentHashMap
ImmutableClass
Decor View
Type safety in data
Legacy Libraries
What is refrential integrity
sendBroadcast and sendOrderedBroadcast




