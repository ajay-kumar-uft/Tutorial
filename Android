-----------------------------------------------------
SparseArray<E>, SparseBooleanArray, SparseIntArray - Maps integers to Objects, avoid the creation of Integer objects as in Map<Integer, String>. These are efficient memory structures than HashMap. Ex-

SparseArray<String> map = new SparseArray<String>();
map.put(1, "Hello");

-----------------------------------------------------
least recently used cache _ (LRU cache) - A LRU cache keeps track of the usage of its members. It has a given size and if this size is exceeded, it removes the items which have not be accessed the longest.

onTrimMemory()- This method is called by the Android system asking you to cleanup your memory in case the Android system requires resources for foreground processes.

By default, the cache size is measured in the number of entries. Override sizeOf(K, V) to size the cache in different units. For example, this cache is limited to 4MiB of bitmaps

Cache - 1 Memorycache (LruCache) -  while in the background it might be killed
	2 DiskCache (DiskLruCache) -  fetching images from disk is slower than loading from memory and should be done in a background thread, as disk read times can be unpredictable

Note: A ContentProvider might be a more appropriate place to store cached images if they are accessed more frequently, for example in an image gallery application.

-----------------------------------------------------

ViewPager- getItemPosition(). If for a child view this method returns POSITION_NONE, the ViewPager understands that the view has been deleted, calling the destroyItem(), and removing this view
So this approach is wrong if items count is too high.

approach is to use the setTag() method for any instantiated view in the instantiateItem() method. So when you want to change the data or invalidate the view that you need, you can call the findViewWithTag() method on the ViewPager to retrieve the previously instantiated view and modify/use it as you want without having to delete/create a new view each time you want to update some value.

----------------------------------------------------------


-------------------------Hey--------------------------------
Executor
OEM
What is the use of cryptoobjects
Jetpack, Jetpack Datastore
Blocking queue and dequeue
Lazy and eager
ViewModel and AndroidViewModel
Thread
Application COntext and context
Lifecycle and LifecycleOwner, LifecycleObeservers

LiveData, MutableLiveData and MediatorLiveData
Loaders and Room
HIDL and HAL
HashMap and ConcurrentHashMap
ImmutableClass
Decor View
Type safety in data
Legacy Libraries
What is refrential integrity
sendBroadcast and sendOrderedBroadcast




